k1<-10
k2<-20
set.seed(34567)
samp1<-sample(c("Paralytic","NonParalytic","FalseReports"),k1,
replace=TRUE,prob=outcome.prop)
samp2<-sample(c("Paralytic","NonParalytic","FalseReports"),k2,
replace=TRUE,prob=outcome.prop)
## Total the number of each type of outcome in each sample.
counts1<-table(samp1)
counts2<-table(samp2)
## Calculate the proportion each type of outcome in each sample.
props1<-counts1/sum(counts1)
props2<-counts2/sum(counts2)
# Calculate the Euclidean distance between two vectors.
dist.eu<-sqrt(sum((props1-props2)^2))
# Calculate the sum of the absolute differences in each position for
# two vectors.
dist.mann<-sum(abs(props1-props2))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(knitr)
library(HistData)
dat<-PolioTrials
prop_placebo = dat$Paralytic[2]/dat$Population[2]
prop_n_inoculate = dat$Paralytic[3]/dat$Population[3]
prob_success = (dat$Paralytic[2] + dat$Paralytic[3]) / (dat$Population[2] + dat$Population[3])
prob_greater = pbinom(dat$Paralytic[2] -1, dat$Population[2], prob_success, lower.tail = FALSE)
dat.2<-t(dat[1:2,4:6])
dat.2<-data.frame(dat.2)
names(dat.2)<-c("Vaccinated","Placebo")
dat.2$prop_vaccinated <- dat.2$Vaccinated/sum(dat.2$Vaccinated)
dat.2$prop_placebo <- dat.2$Placebo/sum(dat.2$Placebo)
# Create a vector of the all the outcomes
# with the correct number of repetitions.
pop<-rep(row.names(dat.2),times=dat.2$Vaccinated+dat.2$Placebo)
table(pop) # view the results
# Draw a sample of size k from the entries in this vector, that is a permutation of length k.
k<-10
samp.perm<-sample(pop,k)
# Create a vector of the proportion of times each outcome was
# observed in the two groups put together.
outcome.prop<-
(dat.2$Vaccinated+dat.2$Vaccinated)/sum(dat.2$Vaccinated+dat.2$Vaccinated)
outcome.prop
# Sample the vector ("Paralytic","NonParalytic","FalseReports") k times according to the
# probabilites in "rating.prop"
k<-10
set.seed(34567)
samp<-sample(c("Paralytic","NonParalytic","FalseReports"),k,replace=TRUE,prob=outcome.prop)
samp
# Total the number of each type of outcome in the sample.
counts<-table(samp)
counts
# Calculate the proportion each type of outcome in the sample.
props<-counts/sum(counts)
props
# Make two vectors of proportions
## Start by drawing two samples
k1<-10
k2<-20
set.seed(34567)
samp1<-sample(c("Paralytic","NonParalytic","FalseReports"),k1,
replace=TRUE,prob=outcome.prop)
samp2<-sample(c("Paralytic","NonParalytic","FalseReports"),k2,
replace=TRUE,prob=outcome.prop)
## Total the number of each type of outcome in each sample.
counts1<-table(samp1)
counts2<-table(samp2)
## Calculate the proportion each type of outcome in each sample.
props1<-counts1/sum(counts1)
props2<-counts2/sum(counts2)
# Calculate the Euclidean distance between two vectors.
dist.eu<-sqrt(sum((props1-props2)^2))
# Calculate the sum of the absolute differences in each position for
# two vectors.
dist.mann<-sum(abs(props1-props2))
pop<-rep(row.names(dat.2),times=dat.2$Vaccinated+dat.2$Placebo)
table(pop) # view the results
outcome.prop<-
(dat.2$Vaccinated+dat.2$Placebo)/sum(dat.2$Vaccinated+dat.2$Placebo)
outcome.prop
sum(outcome.prop)
test_stat <- sqrt(sum(dat.2$prop_vaccinated - dat.2$prop_placebo)^2)
test_stat
test_stat <- sqrt(sum((dat.2$prop_vaccinated - dat.2$prop_placebo)^2))
test_stat
n <- 10000
k1 <- sum(dat.2$Vaccinated)
k1
k2 <- sum(dat.2$Placebo)
k2
samp1 <- sample(c("Paralytic", "NonParalytic", "FalseReports"), k1, replace=True, prob=outcome.prop)
samp1 <- sample(c("Paralytic", "NonParalytic", "FalseReports"), k1, replace=TRUE, prob=outcome.prop)
table(samp1)
samp2 <- sample(c("Paralytic", "NonParalytic", "FalseReports"), k2, replace=TRUE, prob=outcome.prop)
table(samp2)
n <- 10000
k1 <- sum(dat.2$Vaccinated)
k1
k2 <- sum(dat.2$Placebo)
k2
sim = rep(NA, n)
for(i in 1:n) {
samp1 <- sample(c("Paralytic", "NonParalytic", "FalseReports"), k1, replace=TRUE, prob=outcome.prop)
samp2 <- sample(c("Paralytic", "NonParalytic", "FalseReports"), k2, replace=TRUE, prob=outcome.prop)
counts1 <- table(samp1)
counts2 <- table(samp2)
dist.eu<-sqrt(sum((samp1 - samp2)^2))
sim[i] <- dist.eu
}
for(i in 1:n) {
samp1 <- sample(c("Paralytic", "NonParalytic", "FalseReports"), k1, replace=TRUE, prob=outcome.prop)
samp2 <- sample(c("Paralytic", "NonParalytic", "FalseReports"), k2, replace=TRUE, prob=outcome.prop)
counts1 <- table(samp1)
counts2 <- table(samp2)
props1<-counts1/sum(counts1)
props2<-counts2/sum(counts2)
dist.eu<-sqrt(sum((props1-props2)^2))
sim[i] <- dist.eu
}
for(i in 1:n) {
samp1 <- sample(c("Paralytic", "NonParalytic", "FalseReports"), k1, replace=TRUE, prob=outcome.prop)
samp2 <- sample(c("Paralytic", "NonParalytic", "FalseReports"), k2, replace=TRUE, prob=outcome.prop)
counts1 <- table(samp1)
counts2 <- table(samp2)
props1<-counts1/sum(counts1)
props2<-counts2/sum(counts2)
dist.eu<-sqrt(sum((props1-props2)^2))
sim[i] <- dist.eu
}
dat.temp <- data.frame(sim=sim)
ggplot(data=dat.temp, aes(x=sim)) + geom_histogram()
mean(sim>=test.stat)
mean(sim>=test_stat)
mean(sim>=test_stat)
ggplot(data=dat.temp, aes(x=sim)) + geom_histogram() +geom_vline(xintercept = test_stat, color='red')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(knitr)
set.seed(12345)
N<-10000
samp<-rnorm(N)
theta.est<-function(n,s=samp){
m<-mean(s[1:n])
s2<-sum((s[1:n]-m)^2)/n
return(c(m,s2))
}
dat.consist<-t(sapply(1:N,theta.est))
dat.consist<-data.frame(dat.consist)
dat.consist$n<-1:N
names(dat.consist)<-c("mu.hat","sigma.sq.hat","n")
theta.est<-function(n,s=samp){
m<-mean(s[1:n])
s2<-sum((s[1:n]-m)^2)/n
return(c(m,s2))
}
dat.consist<-t(sapply(1:N,theta.est))
dat.consist<-data.frame(dat.consist)
dat.consist$n<-1:N
names(dat.consist)<-c("mu.hat","sigma.sq.hat","n")
mu <- mean(samp)
sig.sq <- sum((samp - mu)^2)/N
# examine mu
ggplot(data=dat.consist, aes(x=n, y=mu.hat)) + geom_point(aes(x=n, y=mu.hat)) + geom_line(aes(y=mu), color='red')
# examine sigma^2
ggplot(data=dat.consist, aes(x=n, y=mu.hat)) + geom_point(aes(x=n, y=sigma.sq.hat)) + geom_line(aes(y=sig.sq), color='red')
# plot M vs theta.hat.mu
ggplot(data=dat.unbiased, aes(x=m, y=mu.hat)) + geom_point(aes(x=m, y=mu.hat)) + geom_line(aes(y=mu), color='red')
set.seed(45678)
mat<-matrix(rnorm(10000*5),ncol=5)
mat <- data.frame(mat)
mat$mu.hat <- rowMeans(mat)
mat$sig.sq.hat <- apply(mat, 1,function(x){sum((x[1:5] - x[6])^2/5)})
theta.hat.mu <- dat.consist[dat.consist$n == 5,1]
theta.hat.sig.sq <- dat.consist[dat.consist$n == 5,2]
theta.hat.est <- function(n, d=mat) {
m <- mean(d$mu.hat[1:n])
s2 <- mean(d$sig.sq.hat[1:n])
return (c(m, s2))
}
dat.unbiased <- t(sapply(1:10000, theta.hat.est))
dat.unbiased <- t(sapply(1:10000, theta.hat.est))
dat.unbiased <- data.frame(dat.unbiased)
dat.unbiased$M <- 1:10000
dat.unbiased$M <- 1:10000
names(dat.unbiased) <- c('mu.hat', 'sig.sq.hat', 'm')
# plot M vs theta.hat.mu
ggplot(data=dat.unbiased, aes(x=m, y=mu.hat)) + geom_point(aes(x=m, y=mu.hat)) + geom_line(aes(y=mu), color='red')
# plot M vs theta.hat.sig.sq
ggplot(data=dat.unbiased, aes(x=m, y=sig.sq.hat)) + geom_point(aes(x=m, y=sig.sq.hat)) + geom_line(aes(y=sig.sq), color='red')
ns<-rep(c(2,5,20),times=c(3,3,3))
shapes<-rep(c(1,2,8),times=3)
scales<-rep(c(2,.5,.125),times=3)
dat.params<-data.frame(ns,shapes,scales)
val.mat<-matrix(rep(NA,100000*nrow(dat.params)),
ncol=nrow(dat.params))
set.seed(123456)
for(i in 1:nrow(dat.params)){
# Generate a matrix with 100,000 rows of n
# random values from a gamma distribution where the value of n
# and of the shape and scale of the gamma distribution come from the
# ith row of dat.params.
samp.mat<-matrix(rgamma(dat.params$ns[i]*100000,dat.params$shapes[i],
dat.params$scales[i]),nrow=100000)
# take the mean of each row and store the result in val.mat
val.mat[,i]=apply(samp.mat,1,mean)
}
val.stats<-function(x){
return(c(median(x),quantile(x,.75)-quantile(x,.25)))
}
params<-apply(val.mat,2,val.stats)
for(i in 1:ncol(val.mat)){
dat.temp<-data.frame(x=val.mat[,i])
g<-ggplot(dat.temp,aes(x=x))+
geom_histogram(aes(y=stat(density)),bins=50)+
labs(title=str_c("n=",dat.params$ns[i],", shape=",
dat.params$shapes[i],
", scale=",round(dat.params$scales[i],2)))+
stat_function(fun=dnorm,args=list(mean=params[1,i],
sd=params[2,i]/(2*qnorm(.75))))
print(g)
}
x_0.75 <- rep(NA, 10)
for (i in 1:10) {
x_0.75[i] <- qnorm(0.75, mean=0, sd=i)
}
x_0.75 <- data.frame(x_0.75)
x_0.75$sd <- 1:10
ggplot(x_0.75, aes(x=sd, y=x_0.75)) +
geom_point()
ns<-rep(c(10,50,1000), times=c(3, 3, 3))
ps<-rep(c(.5,.1,.01), times=3)
params<-data.frame(ns,ps)
View(params)
params$bins <- 1 / params$ns
means <-matrix(rep(NA,100000*nrow(params)),
ncol=nrow(params))
for(i in 1:nrow(params)){
sample <- matrix(rbinom(params$ns[i]*100000,1,params$ps[i]),nrow=100000)
means[,i]=apply(sample,1,mean)
}
for(i in 1:nrow(params)){
sample <- matrix(rbinom(params$ns[i]*100000,1,params$ps[i]),nrow=100000)
means[,i]=apply(sample,1,mean)
}
med_inqr <-apply(means,2,val.stats)
med_inqr <-apply(means,2,val.stats)
for(i in 1:ncol(means)){
dat.temp<-data.frame(x=means[,i])
g<-ggplot(dat.temp,aes(x=x))+
geom_histogram(aes(y=stat(density)),binwidth=params$bins[i])+
labs(title=str_c("n=",params$ns[i],", p=",
params$ps[i]))+
stat_function(fun=dnorm,args=list(mean=med_inqr[1,i],
sd=med_inqr[2,i]/(2*qnorm(.75))))
print(g)
}
mat$sig.sq.hat <- apply(mat, 1,function(x){sum((x[1:5] - x[6])^2/4)})
# dividing sum of squared differences by 4 instead of 5
mat$sig.sq.hat <- apply(mat, 1,function(x){sum((x[1:5] - x[6])^2/4)})
ggplot(data=dat.unbiased, aes(x=m, y=sig.sq.hat)) + geom_point(aes(x=m, y=sig.sq.hat)) + geom_line(aes(y=sig.sq), color='red')
dat.unbiased <- t(sapply(1:10000, theta.hat.est))
dat.unbiased <- data.frame(dat.unbiased)
dat.unbiased$M <- 1:10000
names(dat.unbiased) <- c('mu.hat', 'sig.sq.hat', 'm')
ggplot(data=dat.unbiased, aes(x=m, y=sig.sq.hat)) + geom_point(aes(x=m, y=sig.sq.hat)) + geom_line(aes(y=sig.sq), color='red')
dat <- read.csv("housing_data.csv")
str(housing)
str(dat)
dat <- read.csv("housing_data.csv")
str(dat)
for (x in c(names(dat))) {
print(attributes(dat[[x]]))
print(table(dat[[x]], exclude=NULL))
}
dat <- read.csv("housing_data.csv")
str(dat)
for (x in c(names(dat))) {
print(x)
print(table(dat[[x]], exclude=NULL))
}
dat <- read.csv("housing_data.csv")
str(dat)
dat <- dat[,-c(1)]
str(dat)
dat <- dat[-c("Condition1", "Condition2", "Exterior2nd", "MasVnrType", "MasVnrArea", "BsmtExposure", "BsmtFinType2", "BsmtFinSF2", "SaleType", "SaleCondition")]
dat <- dat[,-c("Condition1", "Condition2", "Exterior2nd", "MasVnrType", "MasVnrArea", "BsmtExposure", "BsmtFinType2", "BsmtFinSF2", "SaleType", "SaleCondition")]
dat <- subset(dat, select=-c("Condition1", "Condition2", "Exterior2nd", "MasVnrType", "MasVnrArea", "BsmtExposure", "BsmtFinType2", "BsmtFinSF2", "SaleType", "SaleCondition"))
dat <- subset(dat, select=-c(Condition1, Condition2, Exterior2nd, MasVnrType, MasVnrArea, BsmtExposure, BsmtFinType2, BsmtFinSF2, SaleType, SaleCondition))
dim(dat)
colSums(is.na(dat))
dat[is.na(dat$LotFrontage)] <- 0
dat[is.na(dat$LotFrontage),] <- 0
colSums(is.na(dat))
dat <- read.csv("housing_data.csv")
str(dat)
dat <- dat[,-c(1)]
str(dat)
dat <- subset(dat, select=-c(Condition1, Condition2, Exterior2nd, MasVnrType, MasVnrArea, BsmtExposure, BsmtFinType2, BsmtFinSF2, SaleType, SaleCondition))
dim(dat)
colSums(is.na(dat))
dat$LotFrontage[is.na(dat$LotFrontage)] <- 0
colSums(is.na(dat))
dat$LotFrontage[is.na(dat$LotFrontage)] <- 0
dat$Alley[is.na(dat$Alley)] <- "None"
dat$BsmtQual[is.na(dat$BsmtQual)] <- "None"
dat$BsmtCond[is.na(dat$BsmtCond)] <- "None"
dat$BsmtFinType1[is.na(dat$BsmtFinType1)] <- "None"
dat$Electrical[is.na(dat$Electrical)] <- "Unknown"
dat$FireplaceQu[is.na(dat$FireplaceQu)] <- "None"
dat$GarageType[is.na(dat$GarageType)] <- "None"
dat$GarageYrBlt[is.na(dat$GarageYrBlt)] <- "0"
dat$GarageFinish[is.na(dat$GarageFinish)] <- "None"
dat$GarageQual[is.na(dat$GarageQual)] <- "None"
dat$GarageCond[is.na(dat$GarageCond)] <- "None"
dat$PoolQC[is.na(dat$PoolQC)] <- "None"
dat$Fence[is.na(dat$Fence)] <- "None"
dat$MiscFeature[is.na(dat$Fence)] <- "None"
colSums(is.na(dat))
dat$LotFrontage[is.na(dat$LotFrontage)] <- 0
dat$Alley[is.na(dat$Alley)] <- "None"
dat$BsmtQual[is.na(dat$BsmtQual)] <- "None"
dat$BsmtCond[is.na(dat$BsmtCond)] <- "None"
dat$BsmtFinType1[is.na(dat$BsmtFinType1)] <- "None"
dat$Electrical[is.na(dat$Electrical)] <- "Unknown"
dat$FireplaceQu[is.na(dat$FireplaceQu)] <- "None"
dat$GarageType[is.na(dat$GarageType)] <- "None"
dat$GarageYrBlt[is.na(dat$GarageYrBlt)] <- "0"
dat$GarageFinish[is.na(dat$GarageFinish)] <- "None"
dat$GarageQual[is.na(dat$GarageQual)] <- "None"
dat$GarageCond[is.na(dat$GarageCond)] <- "None"
dat$PoolQC[is.na(dat$PoolQC)] <- "None"
dat$Fence[is.na(dat$Fence)] <- "None"
dat$MiscFeature[is.na(dat$MiscFeature)] <- "None"
colSums(is.na(dat))
dat$MSSubClass <- as.factor(dat$MSSubClass)
dat$MSZoning <- as.factor(dat$MSZoning)
dat$Street <- as.factor(dat$Street)
dat$Alley <- as.factor(dat$Alley)
dat$LotShape <- as.factor(dat$LotShape)
dat$LandContour <- as.factor(dat$LandContour)
dat$Utilities <- as.factor(dat$Utilities)
dat$LotConfig <- as.factor(dat$LotConfig)
dat$LandSlope <- as.factor(dat$LandSlope)
dat$Neighborhood <- as.factor(dat$Neighborhood)
dat$BldgType <- as.factor(dat$BldgType)
dat$HouseStyle <- as.factor(dat$HouseStyle)
dat$OverallQual <- as.factor(dat$OverallQual)
dat$OverallCond <- as.factor(dat$OverallCond)
dat$RoofStyle <- as.factor(dat$RoofStyle)
dat$RoofMatl <- as.factor(dat$RoofMatl)
dat$Exterior1st <- as.factor(dat$Exterior1st)
dat$ExterQual <- as.factor(dat$ExterQual)
dat$ExterCond <- as.factor(dat$ExterCond)
dat$Foundation <- as.factor(dat$Foundation)
dat$BsmtQual <- as.factor(dat$BsmtQual)
dat$BsmtCond <- as.factor(dat$BsmtCond)
dat$BsmtFinType1 <- as.factor(dat$BsmtFinType1)
dat$Heating <- as.factor(dat$Heating)
dat$HeatingQC <- as.factor(dat$HeatingQC)
dat$CentralAir <- as.factor(dat$CentralAir)
dat$Electrical <- as.factor(dat$Electrical)
dat$KitchenQual <- as.factor(dat$KitchenQual)
dat$Functional <- as.factor(dat$Functional)
dat$FireplaceQu <- as.factor(dat$FireplaceQu)
dat$GarageType <- as.factor(dat$GarageType)
dat$GarageFinish <- as.factor(dat$GarageFinish)
dat$GarageQual <- as.factor(dat$GarageQual)
dat$GarageCond <- as.factor(dat$GarageCond)
dat$PavedDrive <- as.factor(dat$PavedDrive)
dat$PoolQC <- as.factor(dat$PoolQC)
dat$Fence <- as.factor(dat$Fence)
dat$MiscFeature <- as.factor(dat$MiscFeature)
str(dat)
qplot(dat$SalePrice)
ggplot(data=dat, aes(x=SalePrice)) + geom_hist()
library(ggplot2)
ggplot(data=dat, aes(x=SalePrice)) + geom_hist()
ggplot(data=dat, aes(x=SalePrice)) + geom_histogram()
ggplot(data=dat, aes(x=SalePrice)) + geom_histogram() + geom_line(stat='frequency')
ggplot(data=dat, aes(x=SalePrice)) + geom_histogram() + geom_line(stat='density')
ggplot(data=dat, aes(x=SalePrice)) + geom_histogram() + geom_density()
ggplot(data=dat, aes(x=SalePrice)) + geom_histogram()
ggplot(data=dat, aes(x=SalePrice)) + geom_histogram() + stat_function(fun=dnorm)
ggplot(data=dat, aes(x=SalePrice)) + geom_histogram()
for (col in c(names(dat))) {
ggplot(data=dat, aes(x=col)) + geom_histogram()
}
for (col in c(names(dat))) {
print(ggplot(data=dat, aes(x=col)) + geom_histogram())
}
print(ggplot(data=dat, aes(x=col)) + geom_histogram(stat='count'))
print(ggplot(data=dat, aes(x=col)) + geom_bar())
for (col in c(names(dat))) {
print(ggplot(data=dat, aes(x=col)) + geom_bar())
}
for (col in c(names(dat))) {
print(ggplot(data=dat, aes(col)) + geom_bar())
}
for (col in c(names(dat))) {
print(ggplot(data=dat, aes({col})) + geom_bar())
}
for (col in c(names(dat))) {
print(ggplot(data=dat, aes_string(x=col)) + geom_bar())
}
str(dat$SalePrice)
str(dat$SalePrice)[0]
dat[[col]]
for (col in c(names(dat))) {
g <- ggplot(data=dat, aes_string(x=col))
if is.numeric(dat[[col]]) {
for (col in c(names(dat))) {
g <- ggplot(data=dat, aes_string(x=col))
if (is.numeric(dat[[col]])) {
w = (max(dat[[col]]) - min(dat[[col]])) / 30
g <- g + + geom_bar(width=w)
} else {
g <- g + + geom_bar()
}
print(g)
}
for (col in c(names(dat))) {
g <- ggplot(data=dat, aes_string(x=col))
if (is.numeric(dat[[col]])) {
w = (max(dat[[col]]) - min(dat[[col]])) / 30
g <- g + geom_bar(width=w)
} else {
g <- g + geom_bar()
}
print(g)
}
quantile(dat$SalePrice, probs=0.1)
quantile(dat$SalePrice, probs=0.1)[1]
str(quantile(dat$SalePrice, probs=0.1))
table(quantile(dat$SalePrice, probs=0.05))
table(quantile(dat$SalePrice, probs=0.1))
table(quantile(dat$SalePrice, probs=0.1))[0]
table(quantile(dat$SalePrice, probs=0.1))[1]
table(quantile(dat$SalePrice, probs=0.1))[1,]
table(quantile(dat$SalePrice, probs=0.1))[1,1]
as.integer(quantile(dat$SalePrice, probs=0.05))
as.integer(quantile(dat$SalePrice, probs=0.1))
for (col in c(names(dat))) {
g <- ggplot(data=dat, aes_string(x=col))
if (is.numeric(dat[[col]])) {
w = as.integer(quantile(dat[[col]], probs=0.05))
g <- g + geom_bar(width=w)
} else {
g <- g + geom_bar()
}
print(g)
}
as.integer(quantile(dat$LotFrontage, probs=0.05))
table(dat$LotFrontage)
as.integer(quantile(dat$LotFrontage, probs=0.1))
for (col in c(names(dat))) {
g <- ggplot(data=dat, aes_string(x=col))
if (is.numeric(dat[[col]])) {
w = as.integer(quantile(dat[[col]], probs=0.05))
if (w == 0) {
w = (max(dat[[col]]) - min(dat[[col]])) / 30
}
g <- g + geom_bar(width=w)
} else {
g <- g + geom_bar()
}
print(g)
}
table(dat$Utilities)
table(dat$YearBuilt)
as.integer(quantile(dat$YearBuilt, probs=0.05))
for (col in c(names(dat))) {
g <- ggplot(data=dat, aes_string(x=col))
if (is.numeric(dat[[col]])) {
w = as.integer(quantile(dat[[col]], probs=0.05))
if (w == 0) {
w = (max(dat[[col]]) - min(dat[[col]])) / 30
}
g <- g + geom_bar(binwidth=w)
} else {
g <- g + geom_bar()
}
print(g)
}
for (col in c(names(dat))) {
g <- ggplot(data=dat, aes_string(x=col))
if (is.numeric(dat[[col]])) {
w = as.integer(quantile(dat[[col]], probs=0.05))
if (w == 0) {
w = (max(dat[[col]]) - min(dat[[col]])) / 30
}
g <- g + geom_histogram(binwidth=w)
} else {
g <- g + geom_bar()
}
print(g)
}
for (col in c(names(dat))) {
g <- ggplot(data=dat, aes_string(x=col))
if (is.numeric(dat[[col]])) {
#w = as.integer(quantile(dat[[col]], probs=0.05))
# if (w == 0) {
# w = (max(dat[[col]]) - min(dat[[col]])) / 30
# }
g <- g + geom_histogram(bins=30)
} else {
g <- g + geom_bar()
}
print(g)
}
setwd("~/Desktop/Personal/MSDS/21-Fall/COMP_4442_Advanced_Prob_Stats/comp4442_finalproject")
