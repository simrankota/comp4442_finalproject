dat.unbiased <- t(sapply(1:10000, theta.hat.est))
dat.unbiased <- data.frame(dat.unbiased)
dat.unbiased$M <- 1:10000
dat.unbiased$M <- 1:10000
names(dat.unbiased) <- c('mu.hat', 'sig.sq.hat', 'm')
# plot M vs theta.hat.mu
ggplot(data=dat.unbiased, aes(x=m, y=mu.hat)) + geom_point(aes(x=m, y=mu.hat)) + geom_line(aes(y=mu), color='red')
# plot M vs theta.hat.sig.sq
ggplot(data=dat.unbiased, aes(x=m, y=sig.sq.hat)) + geom_point(aes(x=m, y=sig.sq.hat)) + geom_line(aes(y=sig.sq), color='red')
ns<-rep(c(2,5,20),times=c(3,3,3))
shapes<-rep(c(1,2,8),times=3)
scales<-rep(c(2,.5,.125),times=3)
dat.params<-data.frame(ns,shapes,scales)
val.mat<-matrix(rep(NA,100000*nrow(dat.params)),
ncol=nrow(dat.params))
set.seed(123456)
for(i in 1:nrow(dat.params)){
# Generate a matrix with 100,000 rows of n
# random values from a gamma distribution where the value of n
# and of the shape and scale of the gamma distribution come from the
# ith row of dat.params.
samp.mat<-matrix(rgamma(dat.params$ns[i]*100000,dat.params$shapes[i],
dat.params$scales[i]),nrow=100000)
# take the mean of each row and store the result in val.mat
val.mat[,i]=apply(samp.mat,1,mean)
}
val.stats<-function(x){
return(c(median(x),quantile(x,.75)-quantile(x,.25)))
}
params<-apply(val.mat,2,val.stats)
for(i in 1:ncol(val.mat)){
dat.temp<-data.frame(x=val.mat[,i])
g<-ggplot(dat.temp,aes(x=x))+
geom_histogram(aes(y=stat(density)),bins=50)+
labs(title=str_c("n=",dat.params$ns[i],", shape=",
dat.params$shapes[i],
", scale=",round(dat.params$scales[i],2)))+
stat_function(fun=dnorm,args=list(mean=params[1,i],
sd=params[2,i]/(2*qnorm(.75))))
print(g)
}
x_0.75 <- rep(NA, 10)
for (i in 1:10) {
x_0.75[i] <- qnorm(0.75, mean=0, sd=i)
}
x_0.75 <- data.frame(x_0.75)
x_0.75$sd <- 1:10
ggplot(x_0.75, aes(x=sd, y=x_0.75)) +
geom_point()
ns<-rep(c(10,50,1000), times=c(3, 3, 3))
ps<-rep(c(.5,.1,.01), times=3)
params<-data.frame(ns,ps)
View(params)
params$bins <- 1 / params$ns
means <-matrix(rep(NA,100000*nrow(params)),
ncol=nrow(params))
for(i in 1:nrow(params)){
sample <- matrix(rbinom(params$ns[i]*100000,1,params$ps[i]),nrow=100000)
means[,i]=apply(sample,1,mean)
}
for(i in 1:nrow(params)){
sample <- matrix(rbinom(params$ns[i]*100000,1,params$ps[i]),nrow=100000)
means[,i]=apply(sample,1,mean)
}
med_inqr <-apply(means,2,val.stats)
med_inqr <-apply(means,2,val.stats)
for(i in 1:ncol(means)){
dat.temp<-data.frame(x=means[,i])
g<-ggplot(dat.temp,aes(x=x))+
geom_histogram(aes(y=stat(density)),binwidth=params$bins[i])+
labs(title=str_c("n=",params$ns[i],", p=",
params$ps[i]))+
stat_function(fun=dnorm,args=list(mean=med_inqr[1,i],
sd=med_inqr[2,i]/(2*qnorm(.75))))
print(g)
}
mat$sig.sq.hat <- apply(mat, 1,function(x){sum((x[1:5] - x[6])^2/4)})
# dividing sum of squared differences by 4 instead of 5
mat$sig.sq.hat <- apply(mat, 1,function(x){sum((x[1:5] - x[6])^2/4)})
ggplot(data=dat.unbiased, aes(x=m, y=sig.sq.hat)) + geom_point(aes(x=m, y=sig.sq.hat)) + geom_line(aes(y=sig.sq), color='red')
dat.unbiased <- t(sapply(1:10000, theta.hat.est))
dat.unbiased <- data.frame(dat.unbiased)
dat.unbiased$M <- 1:10000
names(dat.unbiased) <- c('mu.hat', 'sig.sq.hat', 'm')
ggplot(data=dat.unbiased, aes(x=m, y=sig.sq.hat)) + geom_point(aes(x=m, y=sig.sq.hat)) + geom_line(aes(y=sig.sq), color='red')
library(tidyverse)
library(randomForest)
library(caret)
dat <- read.csv("housing_data.csv")
str(dat)
dat <- dat[,-c(1)]
str(dat)
dat <- subset(dat, select=-c(Condition1, Condition2, Exterior2nd, MasVnrType, MasVnrArea, BsmtExposure, BsmtFinType2, BsmtFinSF2, SaleType, SaleCondition, GarageYrBlt))
dim(dat)
colSums(is.na(dat))
dat$LotFrontage[is.na(dat$LotFrontage)] <- 0
dat$Alley[is.na(dat$Alley)] <- "None"
dat$BsmtQual[is.na(dat$BsmtQual)] <- "None"
dat$BsmtCond[is.na(dat$BsmtCond)] <- "None"
dat$BsmtFinType1[is.na(dat$BsmtFinType1)] <- "None"
dat$Electrical[is.na(dat$Electrical)] <- "Unknown"
dat$FireplaceQu[is.na(dat$FireplaceQu)] <- "None"
dat$GarageType[is.na(dat$GarageType)] <- "None"
dat$GarageFinish[is.na(dat$GarageFinish)] <- "None"
dat$GarageQual[is.na(dat$GarageQual)] <- "None"
dat$GarageCond[is.na(dat$GarageCond)] <- "None"
dat$PoolQC[is.na(dat$PoolQC)] <- "None"
dat$Fence[is.na(dat$Fence)] <- "None"
dat$MiscFeature[is.na(dat$MiscFeature)] <- "None"
colSums(is.na(dat))
dat$MSSubClass <- as.factor(dat$MSSubClass)
dat$MSZoning <- as.factor(dat$MSZoning)
dat$Street <- as.factor(dat$Street)
dat$Alley <- as.factor(dat$Alley)
dat$LotShape <- as.factor(dat$LotShape)
dat$LandContour <- as.factor(dat$LandContour)
dat$Utilities <- as.factor(dat$Utilities)
dat$LotConfig <- as.factor(dat$LotConfig)
dat$LandSlope <- as.factor(dat$LandSlope)
dat$Neighborhood <- as.factor(dat$Neighborhood)
dat$BldgType <- as.factor(dat$BldgType)
dat$HouseStyle <- as.factor(dat$HouseStyle)
dat$OverallQual <- as.factor(dat$OverallQual)
dat$OverallCond <- as.factor(dat$OverallCond)
dat$RoofStyle <- as.factor(dat$RoofStyle)
dat$RoofMatl <- as.factor(dat$RoofMatl)
dat$Exterior1st <- as.factor(dat$Exterior1st)
dat$ExterQual <- as.factor(dat$ExterQual)
dat$ExterCond <- as.factor(dat$ExterCond)
dat$Foundation <- as.factor(dat$Foundation)
dat$BsmtQual <- as.factor(dat$BsmtQual)
dat$BsmtCond <- as.factor(dat$BsmtCond)
dat$BsmtFinType1 <- as.factor(dat$BsmtFinType1)
dat$Heating <- as.factor(dat$Heating)
dat$HeatingQC <- as.factor(dat$HeatingQC)
dat$CentralAir <- as.factor(dat$CentralAir)
dat$Electrical <- as.factor(dat$Electrical)
dat$KitchenQual <- as.factor(dat$KitchenQual)
dat$Functional <- as.factor(dat$Functional)
dat$FireplaceQu <- as.factor(dat$FireplaceQu)
dat$GarageType <- as.factor(dat$GarageType)
dat$GarageFinish <- as.factor(dat$GarageFinish)
dat$GarageQual <- as.factor(dat$GarageQual)
dat$GarageCond <- as.factor(dat$GarageCond)
dat$PavedDrive <- as.factor(dat$PavedDrive)
dat$PoolQC <- as.factor(dat$PoolQC)
dat$Fence <- as.factor(dat$Fence)
dat$MiscFeature <- as.factor(dat$MiscFeature)
str(dat)
for (col in c(names(dat))) {
g <- ggplot(data=dat, aes_string(x=col))
if (is.numeric(dat[[col]])) {
g <- g + geom_histogram(bins=30)
} else {
g <- g + geom_bar()
}
print(g)
}
set.seed(1234567890)
n <- nrow(dat)
tv.split <- sample(rep(0:1, c(round(n*.3),n-2*round(n*.15))),n)
dat.train <- dat[tv.split==1,]
dat.valid <- dat[tv.split==0,]
housing.randomForest <- randomForest(formula = SalePrice ~ ., data = dat)
plot(housing.randomForest)
variable.Importance <- data.frame(housing.randomForest$importance) %>%
arrange(desc(IncNodePurity)) %>%
top_n(25)
(ggplot(data = variable.Importance,
aes(x = reorder(row.names(variable.Importance), IncNodePurity), y = IncNodePurity))
+ geom_col() + coord_flip() + ggtitle("Top 25 important variables"))
x.valid <- dat.valid[setdiff(names(dat.valid), "SalePrice")]
y.valid <- dat.valid$SalePrice
randomforest.trained <- randomForest(formula = SalePrice ~ ., data = dat.train)
find.RMSPE <- function(true, predicted, df) {
return(sqrt(sum((predicted - true)^2)/nrow(df)))
}
predictions.valid <- predict(randomforest.trained, dat.valid)
RMSPE <- find.RMSPE(dat.valid$SalePrice, predictions.valid, dat.valid)
RMSPE
randomforest.validated <- randomForest(formula = SalePrice ~ ., data = dat.train,
xtest = x.valid, ytest = y.valid)
tibble(`Out of Bag Error` = sqrt(randomforest.validated$mse),
`Validation Error` = sqrt(randomforest.validated$test$mse),
ntrees = 1:randomforest.validated$ntree) %>%
gather(Grouping, RMSE, -ntrees) %>%
ggplot(aes(ntrees, RMSE, color = Grouping)) +
geom_line() +
scale_y_continuous(labels = scales::dollar) +
xlab("Number of trees")
features <- setdiff(names(dat), "SalePrice")
set.seed(123)
m2 <- tuneRF(
x          = dat.train[features],
y          = dat.train$SalePrice,
ntreeTry   = 500,
mtryStart  = 5,
stepFactor = 1.5,
improve    = 0.01,
trace      = FALSE      # to not show real-time progress
)
randomforest.tuned <- randomForest(formula = SalePrice ~ ., data = dat.train, mtry=7)
pred <- predict(randomforest.tuned, dat.valid)
RMSPE <- find.RMSPE(dat.valid$SalePrice, pred, dat.valid)
RMSPE
for (col in c(names(dat))) {
if (is.numeric(dat[[col]])) {
ggqqplot(dat[[col]])
print(g)
}
}
library(ggpubr)
for (col in c(names(dat))) {
if (is.numeric(dat[[col]])) {
ggqqplot(dat[[col]])
print(g)
}
}
for (col in c(names(dat))) {
if (is.numeric(dat[[col]])) {
print(ggqqplot(dat[[col]]))
}
}
set.seed(1234567890)
n <- nrow(dat)
tv.split <- sample(rep(0:1, c(round(n*.3),n-2*round(n*.15))),n)
dat.train <- dat[tv.split==1,]
dat.valid <- dat[tv.split==0,]
housing.randomForest <- randomForest(formula = SalePrice ~ ., data = dat)
plot(housing.randomForest)
variable.Importance <- data.frame(housing.randomForest$importance) %>%
arrange(desc(IncNodePurity)) %>%
top_n(10)
(ggplot(data = variable.Importance,
aes(x = reorder(row.names(variable.Importance), IncNodePurity), y = IncNodePurity))
+ geom_col() + coord_flip() + ggtitle("Top 10 important variables"))
setwd("~/Desktop/Personal/MSDS/21-Fall/COMP_4442_Advanced_Prob_Stats/comp4442_finalproject")
set.seed(1234567890)
n <- nrow(dat)
tv.split <- sample(rep(0:1, c(round(n*.3),n-2*round(n*.15))),n)
dat.train <- dat[tv.split==1,]
dat.valid <- dat[tv.split==0,]
housing.randomForest <- randomForest(formula = SalePrice ~ ., data = dat)
library(tidyverse)
library(randomForest)
library(caret)
library(ggpubr)
dat <- read.csv("housing_data.csv")
str(dat)
dat <- dat[,-c(1)]
str(dat)
dat <- subset(dat, select=-c(Condition1, Condition2, Exterior2nd, MasVnrType, MasVnrArea, BsmtExposure, BsmtFinType2, BsmtFinSF2, SaleType, SaleCondition, GarageYrBlt))
dim(dat)
colSums(is.na(dat))
dat$LotFrontage[is.na(dat$LotFrontage)] <- 0
dat$Alley[is.na(dat$Alley)] <- "None"
dat$BsmtQual[is.na(dat$BsmtQual)] <- "None"
dat$BsmtCond[is.na(dat$BsmtCond)] <- "None"
dat$BsmtFinType1[is.na(dat$BsmtFinType1)] <- "None"
dat$Electrical[is.na(dat$Electrical)] <- "Unknown"
dat$FireplaceQu[is.na(dat$FireplaceQu)] <- "None"
dat$GarageType[is.na(dat$GarageType)] <- "None"
dat$GarageFinish[is.na(dat$GarageFinish)] <- "None"
dat$GarageQual[is.na(dat$GarageQual)] <- "None"
dat$GarageCond[is.na(dat$GarageCond)] <- "None"
dat$PoolQC[is.na(dat$PoolQC)] <- "None"
dat$Fence[is.na(dat$Fence)] <- "None"
dat$MiscFeature[is.na(dat$MiscFeature)] <- "None"
colSums(is.na(dat))
dat$MSSubClass <- as.factor(dat$MSSubClass)
dat$MSZoning <- as.factor(dat$MSZoning)
dat$Street <- as.factor(dat$Street)
dat$Alley <- as.factor(dat$Alley)
dat$LotShape <- as.factor(dat$LotShape)
dat$LandContour <- as.factor(dat$LandContour)
dat$Utilities <- as.factor(dat$Utilities)
dat$LotConfig <- as.factor(dat$LotConfig)
dat$LandSlope <- as.factor(dat$LandSlope)
dat$Neighborhood <- as.factor(dat$Neighborhood)
dat$BldgType <- as.factor(dat$BldgType)
dat$HouseStyle <- as.factor(dat$HouseStyle)
dat$OverallQual <- as.factor(dat$OverallQual)
dat$OverallCond <- as.factor(dat$OverallCond)
dat$RoofStyle <- as.factor(dat$RoofStyle)
dat$RoofMatl <- as.factor(dat$RoofMatl)
dat$Exterior1st <- as.factor(dat$Exterior1st)
dat$ExterQual <- as.factor(dat$ExterQual)
dat$ExterCond <- as.factor(dat$ExterCond)
dat$Foundation <- as.factor(dat$Foundation)
dat$BsmtQual <- as.factor(dat$BsmtQual)
dat$BsmtCond <- as.factor(dat$BsmtCond)
dat$BsmtFinType1 <- as.factor(dat$BsmtFinType1)
dat$Heating <- as.factor(dat$Heating)
dat$HeatingQC <- as.factor(dat$HeatingQC)
dat$CentralAir <- as.factor(dat$CentralAir)
dat$Electrical <- as.factor(dat$Electrical)
dat$KitchenQual <- as.factor(dat$KitchenQual)
dat$Functional <- as.factor(dat$Functional)
dat$FireplaceQu <- as.factor(dat$FireplaceQu)
dat$GarageType <- as.factor(dat$GarageType)
dat$GarageFinish <- as.factor(dat$GarageFinish)
dat$GarageQual <- as.factor(dat$GarageQual)
dat$GarageCond <- as.factor(dat$GarageCond)
dat$PavedDrive <- as.factor(dat$PavedDrive)
dat$PoolQC <- as.factor(dat$PoolQC)
dat$Fence <- as.factor(dat$Fence)
dat$MiscFeature <- as.factor(dat$MiscFeature)
str(dat)
for (col in c(names(dat))) {
g <- ggplot(data=dat, aes_string(x=col))
if (is.numeric(dat[[col]])) {
g <- g + geom_histogram(bins=30)
} else {
g <- g + geom_bar()
}
print(g)
}
set.seed(1234567890)
n <- nrow(dat)
tv.split <- sample(rep(0:1, c(round(n*.3),n-2*round(n*.15))),n)
dat.train <- dat[tv.split==1,]
dat.valid <- dat[tv.split==0,]
housing.randomForest <- randomForest(formula = SalePrice ~ ., data = dat)
plot(housing.randomForest)
variable.Importance <- data.frame(housing.randomForest$importance) %>%
arrange(desc(IncNodePurity)) %>%
top_n(10)
(ggplot(data = variable.Importance,
aes(x = reorder(row.names(variable.Importance), IncNodePurity), y = IncNodePurity))
+ geom_col() + coord_flip() + ggtitle("Top 10 important variables"))
totalTreesBasic <- length(housing.randomForest$mse)
totalTreesBasic
minErrorTreesBasic <- which.min(housing.randomForest$mse)
minErrorTreesBasic
minErrorValueBasic <- sqrt(housing.randomForest$mse[which.min(housing.randomForest$mse)])
minErrorValueBasic
x.valid <- dat.valid[setdiff(names(dat.valid), "SalePrice")]
y.valid <- dat.valid$SalePrice
randomforest.trained <- randomForest(formula = SalePrice ~ ., data = dat.train)
find.RMSPE <- function(true, predicted, df) {
return(sqrt(sum((predicted - true)^2)/nrow(df)))
}
predictions.valid <- predict(randomforest.trained, dat.valid)
totalTreesTrained <- length(randomforest.trained$mse)
totalTreesTrained
minErrorTreesTrained <- which.min(randomforest.trained$mse)
minErrorTreesTrained
minErrorValueTrained <- sqrt(randomforest.trained$mse[which.min(randomforest.trained$mse)])
minErrorValueTrained
RMSPE <- find.RMSPE(dat.valid$SalePrice, predictions.valid, dat.valid)
RMSPE
randomforest.validated <- randomForest(formula = SalePrice ~ ., data = dat.train,
xtest = x.valid, ytest = y.valid)
totalTreesOOB <- length(randomforest.validated$mse)
totalTreesOOB
minErrorTreesOOB <- which.min(randomforest.validated$mse)
minErrorTreesOOB
minErrorValueOOB <- sqrt(randomforest.validated$mse[which.min(randomforest.validated$mse)])
minErrorValueOOB
totalTreesValidation <- length(randomforest.validated$test$mse)
totalTreesValidation
minErrorTreesValidation <- which.min(randomforest.validated$test$mse)
minErrorTreesValidation
minErrorValueValidation <- sqrt(randomforest.validated$test$mse[which.min(randomforest.validated$test$mse)])
minErrorValueValidation
tibble(`Out of Bag Error` = sqrt(randomforest.validated$mse),
`Validation Error` = sqrt(randomforest.validated$test$mse),
ntrees = 1:randomforest.validated$ntree) %>%
gather(Grouping, RMSE, -ntrees) %>%
ggplot(aes(ntrees, RMSE, color = Grouping)) +
geom_line() +
scale_y_continuous(labels = scales::dollar) +
xlab("Number of trees")
library(tidyverse)
library(randomForest)
library(caret)
library(ggpubr)
dat <- read.csv("housing_data.csv")
str(dat)
dat <- dat[,-c(1)]
str(dat)
dat <- subset(dat, select=-c(Condition1, Condition2, Exterior2nd, MasVnrType, MasVnrArea, BsmtExposure, BsmtFinType2, BsmtFinSF2, SaleType, SaleCondition, GarageYrBlt))
dim(dat)
colSums(is.na(dat))
dat$LotFrontage[is.na(dat$LotFrontage)] <- 0
dat$Alley[is.na(dat$Alley)] <- "None"
dat$BsmtQual[is.na(dat$BsmtQual)] <- "None"
dat$BsmtCond[is.na(dat$BsmtCond)] <- "None"
dat$BsmtFinType1[is.na(dat$BsmtFinType1)] <- "None"
dat$Electrical[is.na(dat$Electrical)] <- "Unknown"
dat$FireplaceQu[is.na(dat$FireplaceQu)] <- "None"
dat$GarageType[is.na(dat$GarageType)] <- "None"
dat$GarageFinish[is.na(dat$GarageFinish)] <- "None"
dat$GarageQual[is.na(dat$GarageQual)] <- "None"
dat$GarageCond[is.na(dat$GarageCond)] <- "None"
dat$PoolQC[is.na(dat$PoolQC)] <- "None"
dat$Fence[is.na(dat$Fence)] <- "None"
dat$MiscFeature[is.na(dat$MiscFeature)] <- "None"
colSums(is.na(dat))
dat$MSSubClass <- as.factor(dat$MSSubClass)
dat$MSZoning <- as.factor(dat$MSZoning)
dat$Street <- as.factor(dat$Street)
dat$Alley <- as.factor(dat$Alley)
dat$LotShape <- as.factor(dat$LotShape)
dat$LandContour <- as.factor(dat$LandContour)
dat$Utilities <- as.factor(dat$Utilities)
dat$LotConfig <- as.factor(dat$LotConfig)
dat$LandSlope <- as.factor(dat$LandSlope)
dat$Neighborhood <- as.factor(dat$Neighborhood)
dat$BldgType <- as.factor(dat$BldgType)
dat$HouseStyle <- as.factor(dat$HouseStyle)
dat$OverallQual <- as.factor(dat$OverallQual)
dat$OverallCond <- as.factor(dat$OverallCond)
dat$RoofStyle <- as.factor(dat$RoofStyle)
dat$RoofMatl <- as.factor(dat$RoofMatl)
dat$Exterior1st <- as.factor(dat$Exterior1st)
dat$ExterQual <- as.factor(dat$ExterQual)
dat$ExterCond <- as.factor(dat$ExterCond)
dat$Foundation <- as.factor(dat$Foundation)
dat$BsmtQual <- as.factor(dat$BsmtQual)
dat$BsmtCond <- as.factor(dat$BsmtCond)
dat$BsmtFinType1 <- as.factor(dat$BsmtFinType1)
dat$Heating <- as.factor(dat$Heating)
dat$HeatingQC <- as.factor(dat$HeatingQC)
dat$CentralAir <- as.factor(dat$CentralAir)
dat$Electrical <- as.factor(dat$Electrical)
dat$KitchenQual <- as.factor(dat$KitchenQual)
dat$Functional <- as.factor(dat$Functional)
dat$FireplaceQu <- as.factor(dat$FireplaceQu)
dat$GarageType <- as.factor(dat$GarageType)
dat$GarageFinish <- as.factor(dat$GarageFinish)
dat$GarageQual <- as.factor(dat$GarageQual)
dat$GarageCond <- as.factor(dat$GarageCond)
dat$PavedDrive <- as.factor(dat$PavedDrive)
dat$PoolQC <- as.factor(dat$PoolQC)
dat$Fence <- as.factor(dat$Fence)
dat$MiscFeature <- as.factor(dat$MiscFeature)
str(dat)
for (col in c(names(dat))) {
g <- ggplot(data=dat, aes_string(x=col))
if (is.numeric(dat[[col]])) {
g <- g + geom_histogram(bins=30)
} else {
g <- g + geom_bar()
}
print(g)
}
set.seed(1234567890)
n <- nrow(dat)
tv.split <- sample(rep(0:1, c(round(n*.3),n-2*round(n*.15))),n)
dat.train <- dat[tv.split==1,]
dat.valid <- dat[tv.split==0,]
housing.randomForest <- randomForest(formula = SalePrice ~ ., data = dat)
housing.randomForest
plot(housing.randomForest)
variable.Importance.Basic <- data.frame(housing.randomForest$importance) %>%
arrange(desc(IncNodePurity)) %>%
top_n(10)
(ggplot(data = variable.Importance.Basic,
aes(x = reorder(row.names(variable.Importance.Basic), IncNodePurity), y = IncNodePurity))
+ geom_col() + coord_flip() + ggtitle("Top 10 important variables"))
minErrorTreesBasic <- which.min(housing.randomForest$mse)
minErrorTreesBasic
minErrorValueBasic <- sqrt(housing.randomForest$mse[which.min(housing.randomForest$mse)])
minErrorValueBasic
x.valid <- dat.valid[setdiff(names(dat.valid), "SalePrice")]
y.valid <- dat.valid$SalePrice
randomforest.trained <- randomForest(formula = SalePrice ~ ., data = dat.train)
randomforest.trained
find.RMSPE <- function(true, predicted, df) {
return(sqrt(sum((predicted - true)^2)/nrow(df)))
}
predictions.valid <- predict(randomforest.trained, dat.valid)
variable.Importance.trained <- data.frame(randomforest.trained$importance) %>%
arrange(desc(IncNodePurity)) %>%
top_n(10)
(ggplot(data = variable.Importance.trained,
aes(x = reorder(row.names(variable.Importance.trained), IncNodePurity), y = IncNodePurity))
+ geom_col() + coord_flip() + ggtitle("Top 10 important variables"))
minErrorTreesTrained <- which.min(randomforest.trained$mse)
minErrorTreesTrained
minErrorValueTrained <- sqrt(randomforest.trained$mse[which.min(randomforest.trained$mse)])
minErrorValueTrained
RMSPE <- find.RMSPE(dat.valid$SalePrice, predictions.valid, dat.valid)
RMSPE
randomforest.validated <- randomForest(formula = SalePrice ~ ., data = dat.train,
xtest = x.valid, ytest = y.valid)
randomforest.validated
minErrorTreesOOB <- which.min(randomforest.validated$mse)
minErrorTreesOOB
minErrorValueOOB <- sqrt(randomforest.validated$mse[which.min(randomforest.validated$mse)])
minErrorValueOOB
minErrorTreesValidation <- which.min(randomforest.validated$test$mse)
minErrorTreesValidation
minErrorValueValidation <- sqrt(randomforest.validated$test$mse[which.min(randomforest.validated$test$mse)])
minErrorValueValidation
tibble(`Out of Bag Error` = sqrt(randomforest.validated$mse),
`Validation Error` = sqrt(randomforest.validated$test$mse),
ntrees = 1:randomforest.validated$ntree) %>%
gather(Grouping, RMSE, -ntrees) %>%
ggplot(aes(ntrees, RMSE, color = Grouping)) +
geom_line() +
scale_y_continuous(labels = scales::dollar) +
xlab("Number of trees")
variable.Importance.validated <- data.frame(randomforest.validated$importance) %>%
arrange(desc(IncNodePurity)) %>%
top_n(10)
(ggplot(data = variable.Importance.validated,
aes(x = reorder(row.names(variable.Importance.validated), IncNodePurity), y = IncNodePurity))
+ geom_col() + coord_flip() + ggtitle("Top 10 important variables"))
importance(housing.randomForest)
varImpPlot(housing.randomForest)
